# -*- coding: utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,slots,no_utf8strings,coding=utf8
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SERVER_ERROR_CODE(object):
  """
  Коды серверных ошибок (QkdServerError)
  """
  ERROR_BUSY = -1
  ERROR_KEY_EXHAUSTED = -2
  ERROR_INTERNAL = -99

  _VALUES_TO_NAMES = {
    -1: "ERROR_BUSY",
    -2: "ERROR_KEY_EXHAUSTED",
    -99: "ERROR_INTERNAL",
  }

  _NAMES_TO_VALUES = {
    "ERROR_BUSY": -1,
    "ERROR_KEY_EXHAUSTED": -2,
    "ERROR_INTERNAL": -99,
  }

class CLIENT_ERROR_CODE(object):
  """
  Коды клиентских ошибок (QkdClientError)
  """
  ERROR_KEY_UNKNOWN = -101
  ERROR_INVALID_ARGUMENT = -102

  _VALUES_TO_NAMES = {
    -101: "ERROR_KEY_UNKNOWN",
    -102: "ERROR_INVALID_ARGUMENT",
  }

  _NAMES_TO_VALUES = {
    "ERROR_KEY_UNKNOWN": -101,
    "ERROR_INVALID_ARGUMENT": -102,
  }


class KeyInfo(object):
  """
  Структура информации о ключе, возвращается при всех запросах на получение ключа

  Attributes:
   - key_body: Тело ключа, возвращается всегда
   - key_id: Идентификатор ключа, возвращается при вызове get_by_length().
  Используется для последующего получения этого ключа на принимающей стороне.
   - expiration_time: Время действия ключа, возвращается при вызове get_by_length().
  Представлено как UNIX timestamp в миллисекундах в зоне UTC+0
  """

  __slots__ = [ 
    'key_body',
    'key_id',
    'expiration_time',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key_body', None, None, ), # 1
    (2, TType.STRING, 'key_id', None, None, ), # 2
    (3, TType.I64, 'expiration_time', None, None, ), # 3
  )

  def __init__(self, key_body=None, key_id=None, expiration_time=None,):
    self.key_body = key_body
    self.key_id = key_id
    self.expiration_time = expiration_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key_body = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.key_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.expiration_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyInfo')
    if self.key_body is not None:
      oprot.writeFieldBegin('key_body', TType.STRING, 1)
      oprot.writeString(self.key_body)
      oprot.writeFieldEnd()
    if self.key_id is not None:
      oprot.writeFieldBegin('key_id', TType.STRING, 2)
      oprot.writeString(self.key_id)
      oprot.writeFieldEnd()
    if self.expiration_time is not None:
      oprot.writeFieldBegin('expiration_time', TType.I64, 3)
      oprot.writeI64(self.expiration_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key_body)
    value = (value * 31) ^ hash(self.key_id)
    value = (value * 31) ^ hash(self.expiration_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class QkdServerError(TException):
  """
  Ошибка на стороне сервера, клиент не может на неё повлиять.
  Можно подождать retry_after секунд и повторить запрос

  Attributes:
   - error_code: Код ошибки
   - retry_after: Время, через которое можно повторить запрос
   - message: Текстовое описание ошибки
  """

  __slots__ = [ 
    'error_code',
    'retry_after',
    'message',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.DOUBLE, 'retry_after', None, None, ), # 2
    (3, TType.STRING, 'message', None, None, ), # 3
  )

  def __init__(self, error_code=None, retry_after=None, message=None,):
    self.error_code = error_code
    self.retry_after = retry_after
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.retry_after = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QkdServerError')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.retry_after is not None:
      oprot.writeFieldBegin('retry_after', TType.DOUBLE, 2)
      oprot.writeDouble(self.retry_after)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 3)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.retry_after)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class QkdClientError(TException):
  """
  Ошибка на стороне клиента,
  повторный запрос приведет к этой же ошибке

  Attributes:
   - error_code: Код ошибки
   - message: Текстовое описание ошибки
  """

  __slots__ = [ 
    'error_code',
    'message',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, error_code=None, message=None,):
    self.error_code = error_code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QkdClientError')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)

